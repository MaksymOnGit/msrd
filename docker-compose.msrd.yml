version: '3.7'

services:
  apigw:
    image: "envoyproxy/envoy:v1.23-latest"
    volumes:
      - type: bind
        source: ./Envoy/config
        target: /etc/envoy
    ports:
    - "80:80"
    restart: always
    depends_on:
      msrdstocks:
        condition: service_started
      msrdidentity:
        condition: service_started
      msrdfrontend:
        condition: service_started
      msrdproducts:
        condition: service_started
      msrddocuments:
        condition: service_started

  msrdidentity:
    image: ${DOCKER_REGISTRY-}msrdidentity
    build: https://github.com/MaksymOnGit/msrd-identity.git
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - DOTNET_RUNNING_IN_CONTAINER=true
      - CONNECTIONSTRINGS__REPOSITORY=Server=mssql,1433;Database=MsrdAuth;User Id=sa;Password=P@ssw0rd!;
      - LOGGING__LOGLEVEL__DEFAULT=error
      
      - AdminUser__Email=admin@admin.admin
      - AdminUser__Password=P@ssw0rd!
      
      - SmtpSettings__SmtpLogin=${SMTP_LOGIN}
      - SmtpSettings__SmtpPassword=${SMTP_PASSWORD}
      - SmtpSettings__SmtpHost=${SMTP_HOST}
      - SmtpSettings__SmtpPort=${SMTP_PORT}
      - SmtpSettings__SmtpSecureSocketOption=${SMTP_SECURESOCKETOPTION}
      - SmtpSettings__SmtpSenderAddress=${SMTP_SENDERADDRESS}
      - SmtpSettings__SmtpSenderName=${SMTP_SENDERNAME}
      
      - Templates__ConfirmEmailEmailTemplatePath=./HtmlTemplates/ConfirmEmailEmailTemplate.html
      - Templates__ConfirmEmailUriTemplate=http://localhost/auth/registration?email={0}&token={1}
    restart: always
    depends_on:
      mssql:
        condition: service_healthy
    
  msrdfrontend:
    image: ${DOCKER_REGISTRY-}msrdfrontend
    build: https://github.com/MaksymOnGit/msrd-frontend.git
    environment:
      - API_ROOT=http://localhost/api
      - JWT_ISSUER=http://localhost/api/identity
    restart: always
    
    
  msrdproducts:
    image: ${DOCKER_REGISTRY-}msrdproducts
    build: https://github.com/MaksymOnGit/msrd-products.git
    environment:
      - ENV=prod
      - HOST=0.0.0.0:80
      - JWSK_URL=http://msrdidentity/.well-known/jwks
      - DB_CONNECTION_STRING=mongodb://mongo:27017
      - DATABASE=MsrdProducts
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      msrdidentity:
        condition: service_started
        
  msrdproducts-consumer:
    image: ${DOCKER_REGISTRY-}msrdproducts
    build: https://github.com/MaksymOnGit/msrd-products.git
    environment:
      - ENV=prod
      - HOST=0.0.0.0:80
      - JWSK_URL=http://msrdidentity/.well-known/jwks
      - DB_CONNECTION_STRING=mongodb://mongo:27017
      - DATABASE=MsrdProducts
      - APP_MODE=STOCKS_CONSUMER
      - KAFKA_BOOTSTRAP_SERVERS=kafka0:29092
      - KAFKA_CONSUMER_GROUP=msrd.productsconsumer
      - KAFKA_SCHEMAREGISTRY_CLIENT=http://schemaregistry0:8085
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      kafka0:
        condition: service_healthy
      schemaregistry0:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
        
  msrdstocks:
    build: https://github.com/MaksymOnGit/msrd-stocks.git #./MSRD.Stocks/
    image: ${DOCKER_REGISTRY-}msrdstocks
    environment:
      MSRDSTOCKS_HOST: 0.0.0.0
      MSRDSTOCKS_PORT: 80
      MSRDSTOCKS_DB_HOST: postgres
      MSRDSTOCKS_DB_PORT: 5432
      MSRDSTOCKS_DB_USER: sa
      MSRDSTOCKS_DB_PASS: P@ssw0rd!
      MSRDSTOCKS_DB_BASE: MsrdStocks
      MSRDSTOCKS_DB_ECHO: True
      MSRDSTOCKS_KAFKA_BOOTSTRAP_SERVERS: '["kafka0:29092"]'
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      msrdstocks-migrator:
        condition: service_completed_successfully

  msrdstocks-migrator:
    build: https://github.com/MaksymOnGit/msrd-stocks.git
    image: msrdstocks
    restart: "no"
    command: alembic upgrade head
    environment:
      MSRDSTOCKS_DB_HOST: postgres
      MSRDSTOCKS_DB_PORT: 5432
      MSRDSTOCKS_DB_USER: sa
      MSRDSTOCKS_DB_PASS: P@ssw0rd!
      MSRDSTOCKS_DB_BASE: MsrdStocks
      MSRDSTOCKS_DB_ECHO: True
    depends_on:
      postgres:
        condition: service_healthy

  msrdstocks-product-consumer:
    build: https://github.com/MaksymOnGit/msrd-stocks.git #./MSRD.Stocks/
    image: ${DOCKER_REGISTRY-}msrdstocks
    environment:
      MSRDSTOCKS_HOST: 0.0.0.0
      MSRDSTOCKS_PORT: 80
      MSRDSTOCKS_DB_HOST: postgres
      MSRDSTOCKS_DB_PORT: 5432
      MSRDSTOCKS_DB_USER: sa
      MSRDSTOCKS_DB_PASS: P@ssw0rd!
      MSRDSTOCKS_DB_BASE: MsrdStocks
      MSRDSTOCKS_DB_ECHO: True
      MSRDSTOCKS_KAFKA_BOOTSTRAP_SERVERS: '["kafka0:29092"]'
      MSRDSTOCKS_APP_MODE: PRODUCT_CONSUMER
      MSRDSTOCKS_KAFKA_SCHEMAREGISTRY_CLIENT: http://schemaregistry0:8085
    restart: always
    depends_on:
      kafka0:
        condition: service_healthy
      schemaregistry0:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      msrdstocks-migrator:
        condition: service_completed_successfully
        
  msrdstocks-document-consumer:
    build: https://github.com/MaksymOnGit/msrd-stocks.git #./MSRD.Stocks/
    image: ${DOCKER_REGISTRY-}msrdstocks
    environment:
      MSRDSTOCKS_HOST: 0.0.0.0
      MSRDSTOCKS_PORT: 80
      MSRDSTOCKS_DB_HOST: postgres
      MSRDSTOCKS_DB_PORT: 5432
      MSRDSTOCKS_DB_USER: sa
      MSRDSTOCKS_DB_PASS: P@ssw0rd!
      MSRDSTOCKS_DB_BASE: MsrdStocks
      MSRDSTOCKS_DB_ECHO: True
      MSRDSTOCKS_KAFKA_BOOTSTRAP_SERVERS: '["kafka0:29092"]'
      MSRDSTOCKS_APP_MODE: DOCUMENT_CONSUMER
      MSRDSTOCKS_KAFKA_SCHEMAREGISTRY_CLIENT: http://schemaregistry0:8085
    restart: always
    depends_on:
      kafka0:
        condition: service_healthy
      schemaregistry0:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      msrdstocks-migrator:
        condition: service_completed_successfully
      
  msrddocuments:
    build: https://github.com/MaksymOnGit/msrd-documents.git #./MSRD.Documents/
    image: ${DOCKER_REGISTRY-}msrddocuments
    environment:
      PORT: 80
      NODE_ENV: production
      MONGO_URL: mongodb://mongo:27017/MsrdDocuments
      JWSK_URL: http://msrdidentity/.well-known/jwks
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
        
  msrddocuments-consumer:
    image: ${DOCKER_REGISTRY-}msrdproducts
    build: https://github.com/MaksymOnGit/msrd-products.git
    environment:
      - ENV=prod
      - HOST=0.0.0.0:80
      - JWSK_URL=http://msrdidentity/.well-known/jwks
      - DB_CONNECTION_STRING=mongodb://mongo:27017
      - DATABASE=MsrdDocuments
      - APP_MODE=DOCUMENT_STATUS_CONSUMER
      - KAFKA_BOOTSTRAP_SERVERS=kafka0:29092
      - KAFKA_CONSUMER_GROUP=msrd.documentsstatussconsumer
      - KAFKA_SCHEMAREGISTRY_CLIENT=http://schemaregistry0:8085
    restart: always
    depends_on:
      kafka0:
        condition: service_healthy
      schemaregistry0:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      msrdstocks-migrator:
        condition: service_completed_successfully
        
  msrdmeili-product-consumer:
    build: https://github.com/MaksymOnGit/msrd-meili.git #./MSRD.Meili/
    image: ${DOCKER_REGISTRY-}msrdmeili
    environment:
      MSRDMEILI_KAFKA_BOOTSTRAP_SERVERS: '["kafka0:29092"]'
      MSRDMEILI_APP_MODE: PRODUCT_CONSUMER
      MSRDMEILI_KAFKA_SCHEMAREGISTRY_CLIENT: http://schemaregistry0:8085
      MSRDMEILI_KAFKA_CONSUMER_GROUP: msrd.meilisearchconsumer
      MSRDMEILI_MEILISEARCH_URL: http://meilisearch:7700
    restart: always
    depends_on:
      kafka0:
        condition: service_healthy
      schemaregistry0:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      meilisearch:
        condition: service_healthy
        
  msrdmeili-document-consumer:
    build: https://github.com/MaksymOnGit/msrd-meili.git #./MSRD.Meili/
    image: ${DOCKER_REGISTRY-}msrdmeili
    environment:
      MSRDMEILI_KAFKA_BOOTSTRAP_SERVERS: '["kafka0:29092"]'
      MSRDMEILI_APP_MODE: DOCUMENT_CONSUMER
      MSRDMEILI_KAFKA_SCHEMAREGISTRY_CLIENT: http://schemaregistry0:8085
      MSRDMEILI_KAFKA_CONSUMER_GROUP: msrd.meilisearchconsumer
      MSRDMEILI_MEILISEARCH_URL: http://meilisearch:7700
    restart: always
    depends_on:
      kafka0:
        condition: service_healthy
      schemaregistry0:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      meilisearch:
        condition: service_healthy

  create-connectors:
    image: ellerbrock/alpine-bash-curl-ssl
    volumes:
      - ./Kafka/connectors:/connectors
    command: bash -c '/connectors/start.sh'
    depends_on:
      kafka-connect0:
        condition: service_healthy
      schemaregistry0:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      msrdstocks-migrator:
        condition: service_completed_successfully
      mongo:
        condition: service_healthy

  init-kafka:
    image: confluentinc/cp-kafka:7.2.1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka0:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka0:29092 --create --if-not-exists --topic MsrdDocuments.documents --replication-factor 1 --partitions 10
      kafka-topics --bootstrap-server kafka0:29092 --create --if-not-exists --topic MsrdProducts.products --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka0:29092 --create --if-not-exists --topic MsrdStocks.public.document_statuses --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka0:29092 --create --if-not-exists --topic MsrdStocks.public.stock_records --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka0:29092 --list
      "
    depends_on:
      kafka0:
        condition: service_healthy
        